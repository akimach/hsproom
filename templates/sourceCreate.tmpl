{{ define "Header" }}
{{ linkCSS "jquery.uploadbox.css" }}
<style type="text/css">
	#editor {
		height: 500px;
	}
	#preview_dialog .modal-dialog {
		width:  688px;
		height: 580px;
	}
	#preview_dialog .modal-dialog .modal-body {
		max-height: 580px;
	}
	#template_dialog #template_list {
		margin: 20px;
	}
	#template_dialog #template_list button {
		width:  100px;
		height: 130px;

		margin: 10px;

		overflow: hidden;
	}
	#template_dialog #template_list i {
		font-size: 30px;

		color: #ababab;
	}

	.toolbar {
	}

	.form_group {
		margin-bottom: 15px;
	}

	.preview_nomarkdown {
		width: 100%;
		height: 100%;

		font-size: 2.5em;
		padding: 100px;

		color: #aaaaaa;
	}
	.help_cap {
		font-size: 0.9em;

		color: #666666;
	}
	.with_accessory {
		position: relative;
		height: 63px;
	}
	.accessory_frame {
		position: absolute;
		
		bottom: 0;
		right:  0;
	}
	.accessory {
		margin-top: auto;
		margin-bottom: 0;
		padding-left: 5px;
		padding-right: 5px;

		color: rgba(255, 255, 255, 0.84) !important;
	}
</style>

{{ end }}

{{ define "Content" }}

<form id="create_source" role="form" class="form-horizontal" action="/api/program/create/" method="POST" enctype="multipart/form-data">

	<div class="col-md-8 col-md-offset-2">
		<div class="panel panel-primary">
			<div class="panel-heading">
				<div class="row with_accessory">
					<h2 class="col-md-6">新規作成</h2>
					<div class="col-md-6 accessory_frame"><a href="/program/create/" class="accessory btn btn-default btn-flat pull-right">または AXファイルを投稿する <i class="mdi-navigation-arrow-forward"></i></a></div>
				</div>
			</div>
			<div class="panel-body">
				<div class="form_group">
					<label for="title" class="form-label">1. タイトル</label>
					<input type="text" id="title" class="form-control floating-label" placeholder="タイトルを入力しましょう" data-hint="100文字以内で入力してください" name="title" />
				</div>
	
				<label for="editor" class="form-label">2. ソースコード</label>

				<div id="error" class="alert alert-dissmissable alert-danger" style="display:none;">
					<button type="button" class="close" onclick="dismiss_error();">×</button>
					<div id="error_caption">
					</div>
				</div>

				<div class="toolbar btn-toolbar" role="toolbar">
					<div class="btn-group btn-group-sm" role="group">
						<button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown">ファイル<span class="caret"></span></button>
						<ul class="dropdown-menu" role="menu">
							<li><a href="javascript:select_template();">テンプレートを開く...</a></li>
							<li class="divider"></li>
							<li><a href="javascript:download_source();">ソースコードをダウンロードする...(Ctrl+S)</a></li>
							<li><a href="javascript:download_ax();">AXファイルをダウンロードする...</a></li>
						</ul>
					</div>
					<div class="btn-group btn-group-sm" role="group">
						<button type="button" class="btn btn-default btn-flat" onclick="compile(false);" ><i class="mdi-av-play-arrow"></i>実行(F5)</button>
						<button type="button" class="btn btn-default btn-flat" onclick="compile(true);" ><i class="mdi-action-done"></i>文法チェック</button>
						<button type="button" class="btn btn-default btn-flat" onclick="search_help();"><i class="mdi-action-help"></i>ヘルプ(F1)</button>
					</div>
				</div>
				<pre id="editor"></pre>
				<div id="error" class="alert alert-dissmissable alert-danger" style="display:none;">
					<button type="button" class="close" onclick="dismiss_error();">×</button>
					<div id="error_caption">
					</div>
				</div>
				<div class="form-group row">
					<div class="col-md-6">
						<label for="attachments_box" class="form-label">3. 添付ファイル</label>
						<div class="progress progress-default">
							<div id="attachments_capacity" class="capacity progress-bar" style="width: 0%"></div>
						</div>

						<div id="attachments_box"></div>
					</div>
					<div class="col-md-6">
						<label for="thumb_box" class="form-label">4. サムネイル画像</label>
						<div id="thumb_box"></div>
					</div>
			
				</div>

				<label for="description" class="form-label">6. 説明文<span id="description_count" class="small text-muted">0 / 500 文字</span> <a href="javascript:showMarkdownHelp();"><i class="mdi-communication-live-help"></i></a></label>
				<div class="row">
					<div class="col-md-6">
						<textarea id="description" name="description" rows="12" class="form-control floating-label" placeholder="プログラムの説明文を入力しましょう"></textarea>
					</div>
					<div class="col-md-6">
						<div id="preview" class="markdown">
							<div class="preview_nomarkdown">
								<span>プレビュー</span>
							</div>
						</div>
					</div>
				</div>

			</div>
		</div>

		<div class="panel panel-default">
			<div class="panel-heading">
				<b>高度な設定</b><span class="small text-warning"> プログラムがうまく動作しない際に設定してください。</span>
			</div>
			<div class="panel-body">
				<fieldset>
		
					<div class="form-group row">
						<label for="steps" class="col-md-3 form-label text-right">6. ステップ数の上限</label>
						<div class="col-md-6">
							<input type="text" id="steps" class="form-control floating-label" placeholder="デフォルト:5000" data-hint="最大値は30000です" name="steps" />
						</div>
						<div class="help_cap col-md-3">
							<p>
								描画した部分がしばらくすると消えてしまう、画面がちらつく、動作が重たい、などの問題が現れた場合に値を増やしてください。<strong>ただし、値の増加に伴いCPU使用率も上昇します。</strong>
							</p>
						</div>
					</div>

					<div class="form-group row">
						<label for="resolution" class="col-md-3 form-label text-right">8. 実行解像度</label>
						<div class="col-md-6">
							横:<input type="text" id="resolution_w" class="form-control floating-label" placeholder="デフォルト:640" name="resolution_w" /><br />
							縦:<input type="text" id="resolution_h" class="form-control floating-label" placeholder="デフォルト:480" name="resolution_h" />
						</div>
						<div class="help_cap col-md-3">
							<p>
								プログラムの動作解像度を指定します．<strong>640x480以外のサイズでプログラムを作成した場合に指定してください．</strong>指定した解像度をスケーリングし，640x480のサイズで表示を行います．
							</p>
						</div>
					</div>
		
				</fieldset>

			</div>
		</div>

		<input id="published" type="hidden" name="published" value="true">

		<div class="row">
			<div class="col-md-6">
				<div class="form-group">
					<button class="btn btn-default btn-raised form-control" type="button" onclick="submitAsDraft();">下書きとして保存</button>
				</div>
			</div>
			<div class="col-md-6">
				<div class="form-group">
					<button class="btn btn-success btn-raised form-control" type="submit">投稿</button>
				</div>
			</div>
		</div>

	</div>

</form>

<div id="preview_dialog" class="modal fade" tabindex="-1">
	<div class="modal-dialog">
		<div class="modal-content">
			<div class="modal-header">
				<button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>
				<h4 class="modal-title">プレビュー</h4>
			</div>
			<div class="modal-body">
				<iframe id="preview_frame" width=640 height=480 border="0" scrolling="no" tabindex="1"></iframe>
			</div>
			<div class="modal-footer">
				<div class="togglebutton pull-left">
					<label>
						ログ
						<input id="output_toggle" type="checkbox" onclick="toggle_output();" />
					</label>
				</div>
				<button class="btn btn-default" onclick="capture_thumb();">サムネイルを撮る</button>
				<button class="btn btn-default" data-dismiss="modal">閉じる</button>
			</div>
		</div>
	</div>
</div>

<div id="modal" class="modal">
	<div class="modal-dialog">
		<div class="modal-content">
			<div class="modal-header">
				<button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>
				<h4 id="modal_title" class="modal-title"></h4>
			</div>
			<div class="modal-body">
				<p id="modal_text">One fine body…</p>
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-default" data-dismiss="modal">閉じる</button>
			</div>
		</div>
	</div>
</div>

<div id="template_dialog" class="modal">
	<div class="modal-dialog">
		<div class="modal-content">
			<div class="modal-header">
				<button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>
				<h4 id="modal_title" class="modal-title">テンプレートを選んでください</h4>
			</div>
			<div class="modal-body">
				<div id="template_list">
				</div>
				<br clear="both" />
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-primary" onclick="load_template();">開く</button>
				<button type="button" class="btn btn-default" data-dismiss="modal">閉じる</button>
			</div>
		</div>
	</div>
</div>

{{ plugin "showMarkdownHelp" }}

<script type="text/javascript">

var Module = {
	preRun: [],
	postRun: [],
	print: (function() {
		return function(text) {
			console.log(text);
		};
	})(),
	printErr: function(text) {
		text = Array.prototype.slice.call(arguments).join(' ');
		if (0) { // XXX disabled for safety typeof dump == 'function') {
			dump(text + '\n'); // fast, straight to the real console
		} else {
			console.error(text);
		}
	},
	canvas: {},
	setStatus: function(text) {
		console.log(text);
	},
	totalDependencies: 0,
	monitorRunDependencies: function(left) {
	},
	filePackagePrefixURL: "/static/data/",
};

Module["preRun"].push(function () {
	$.ajax({
		method: "GET",
		url: "/static/data/hsproom.as",
	}).success(function (data) {
		console.log("loaded hsproom.as");

		FS.writeFile("/common/hsproom.as", data);
	}).error(function (data) {
		console.log("failed to load hsproom.as");
	});
});

</script>

{{ linkJS "ace.js" }}
{{ linkJS "ext-language_tools.js" }}
{{ linkJS "theme-monokai.js" }}
{{ linkJS "hspcmp.js" }}

{{ linkJS "jquery.uploadbox.js" }}
<script type="text/javascript">

	var editor;
	var thumbnail = "";
	var attachments = new Array(0);

	var templateList = {
		"helloworld" :"Hello World!!",
		"letsdraw1"  :"図形をかこう1",
		"lets3d1"    :"3Dしよう1"
	};
	var selectedTemplate = "";

	function compile(compileOnly) {
		console.log("Compile:");

		var runtime = detect_runtime();

		if (runtime === "undefined") {
			$("#error_caption").html("ランタイム名を判定できませんでした。<br />#include \"hsp3dish.as\"や#include \"hgimg4.as\"などの記述が足りない可能性があります。");
			$("#error").show(500);

			assertBottom("error", "エラーが発生しています。");

			return false;
		}

		var fname = "source.hsp";

		var code = editor.getValue();
		var codeArray = Module.intArrayFromString(code);

		var f = FS.open(fname, "w");
		FS.write(f, codeArray, 0, codeArray.length, 0);
		FS.close(f);

		var fnameArray = Module.intArrayFromString(fname);
		var fnamePtr = Module._malloc(fnameArray.length);
		Module.writeArrayToMemory(fnameArray, fnamePtr);

		Module.ccall('hsc_ini', 'number', ['number', 'number', 'number', 'number'],
											[0, fnamePtr, 0, 0]);
		console.log("Compiler Initialized");

		var option = 4;
		var stat = Module.ccall('hsc_comp', 'number', ['number', 'number', 'number', 'number'],
													[compileOnly ? 0 : 1, option, 0, 0]);
		console.log("Compiled with " + option);
		console.log("Compile result: " + stat);

		var mesPtr = Module._malloc(0x1000);
		Module.ccall('hsc_getmes', 'number', ['number', 'number', 'number', 'number'],
											[mesPtr, 0, 0, 0]);

		var message = Module.Pointer_stringify(mesPtr);
		var lines = message.split("\n");

		// エラー行チェック
		editor.session.clearAnnotations();
		for (var i = 0; i < lines.length; i++) {
			var err = lines[i].match(/\.hsp\(([0-9]+)\) : error /);
			if (err && err[1]) {
				var lineno = +err[1];
				editor.gotoLine(lineno);
				editor.session.setAnnotations([{
					row:lineno - 1 ,column: 0,
					text: lines[i], type:"error"}]); 
			}
		}

		console.log(message);

		Module._free(fnamePtr);
		Module._free(mesPtr);

		if (stat == 0) {
			dismiss_error();

			if (!compileOnly) {
				runProgram(runtime);
			}
			assertBottom("success", "正常にコンパイルできました。");
			return true;
		} else {
			$("#error_caption").html(message.replace(/\n/g, "<br />"));
			$("#error").show(500);
			assertBottom("error", "エラーが発生しています。");

			return false;
		}
	}

	function runProgram(runtime) {
		var data = FS.readFile('source.ax');

		$("#preview_dialog").modal({
			keyboard: false,
		});

		var frame = $("#preview_frame")[0];

		var steps = Number($("#steps").val());
		steps = steps < 5000 ? 5000 : steps;

		var resolution = {
			w: String($("#resolution_w").val()),
			h: String($("#resolution_h").val())
		};

		if (resolution.w == "") resolution.w = "640";
		if (resolution.h == "") resolution.h = "480";

		frame.onload = function() {
			frame.contentWindow["runAX"](data, String(steps), resolution, attachments);
		};
		frame.contentWindow.location.href = "/static/preview"+runtime+".html";
	}

	function dismiss_error() {
		$("#error").hide(500);
	}

	function capture_thumb() {
		var canvas   = $("#preview_frame").contents().find("#canvas")[0];
		var imageUrl = canvas.toDataURL("image/png");

		$("#thumb_box .upload_box_nofile").hide();
		$("#thumb_box .upload_box_status").hide();
		$("#thumb_box .upload_box_preview").attr("src", imageUrl).show();

		thumbnail = imageUrl.split(',')[1];

		assertBottom("success", "サムネイルとして設定しました。");
	}

	function detect_runtime() {
		var text = editor.getValue();

		if (text.match(/^\s*\#\s*include\s*"hsp3dish\.as"/gm)) {
			console.log("HSP3Dish runtime detected");

			return "HSP3Dish";
		}
		if (text.match(/^\s*\#\s*include\s*"hgimg4\.as"/gm)) {
			console.log("HGIMG4 runtime detected");

			return "HGIMG4";
		} else {
			return "undefined";
		}
	}

	function download_source() {
		var text = editor.getValue();
		download("source.hsp", text, "text/plain");
	}

	function download_ax() {
		if (compile(true)) {
			var data = FS.readFile("source.ax");
			download("start.ax", data, "application/octet-stream");
		}
	}

	function download(fname, data, mime) {
		var blob = new Blob([data], {type: mime});

		var a = document.createElement("a");
		a.download = fname;
		a.href = window.URL.createObjectURL(blob);
		document.body.appendChild(a);
		a.click();
		document.body.removeChild(a);
	}

	function toggle_output() {
		var iframe = $("#preview_frame")[0];

		var iframedoc = null;
		if(iframe.contentDocument){
			iframedoc = iframe.contentDocument; 
		} else if(iframe.contentWindow){ 
			iframedoc = iframe.contentWindow.document;
		} else if(iframe.document){
			iframedoc = iframe.document;
		}

		if ($("#output_toggle")[0].checked) {
			$(iframedoc).find("canvas").hide();
		} else {
			$(iframedoc).find("canvas").show();
		}
	}

	function search_help() {
		editor.selection.selectWord();
		var keyword = editor.getSelectedText();

		window.open("http://ohdl.hsproom.me/?q="+keyword, "OHDL", "width=800,height=500,menubar=no,status=no,");
	}

	function submitAsDraft() {
		$("#published").val("false");

		$("#create_source").submit();
	}

	function select_template() {
		$("#template_dialog").modal();
	}

	function load_template() {
		$.get("/static/templates/" + selectedTemplate + ".hsp",
			{}, function (data) {
				editor.setValue(data, -1);
				$("#template_dialog").modal("hide");
				assertBottom("success", "テンプレートを読み込みました");
			}
		).fail(function () {
			assertBottom("error", "テンプレートの読み込みに失敗しました");
		});
	}

	$(document).ready(function () {
		$(document).on("keydown", function(e) {
			if ((e.which || e.keyCode) == 116) {
				e.preventDefault();
			}
		});

		ace.require("ace/ext/language_tools");

		editor = ace.edit("editor");
		editor.setOptions({
			enableBasicAutocompletion: true,
			highlightActiveLine: true,
			highlightGutterLine: true,
			animatedScroll: true,
			showInvisibles: true,
			showLineNumbers: true,
			showGutter: true,
			displayIndentGuides: true,
			useSoftTabs: false,
		});
		editor.setTheme("ace/theme/monokai");
		editor.getSession().setMode("ace/mode/hsp");

		editor.commands.addCommand({
			name: "hspLintShortcut",
			bindKey: {win: "F6", mac: "F6"},
			exec: function() {
				compile(true);
			}
		});
		editor.commands.addCommand({
			name: "hspDebugShortcut",
			bindKey: {win: "F5", mac: "F5"},
			exec: function() {
				compile(false);
			}
		});
		editor.commands.addCommand({
			name: "hspHelpShortcut",
			bindKey: {win: "F1", mac: "F1"},
			exec: function() {
				search_help();
			}
		});
		editor.commands.addCommand({
			name: "hspSaveSourcecode",
			bindKey: {win: "Ctrl-S", mac: "Command-S"},
			exec: function() {
				download_source();
			}
		});

		$.get("/static/templates/helloworld.hsp", {}, function (data) {
			editor.setValue(data, -1);
		});

		$("#attachments_box").uploadbox({
			allowMultiFiles: true,
			emptyText: "添付ファイルをドロップしてください。",
			limitSize: {{ .AttachmentsLimitSize }}
		}).on("onupload", function(e, data, file) {
			attachments.push({
				"name":  file.name,
				"value": data
			});

			updateAttachmentsProgress({{ .AttachmentsLimitSize }});
		}).on("ondelete", function(e, fname) {
			updateAttachmentsProgress({{ .AttachmentsLimitSize }});

			var index = -1;
	
			$.each(attachments, function(i, attachment) {
				if (attachment.name == fname) {
					index = i;
				}
			});
	
			if (index < 0) {
				return;
			}
	
			attachments.splice(index, 1);

		});
		$("#thumb_box").uploadbox({
			emptyText: "サムネイル画像をドロップしてください。",
			emptyIconClass: "mdi-editor-insert-photo",
			limitSize: {{ .ThumbnailLimitSize }}
		}).on("onupload", function(e, data) {
			thumbnail = data;
		});

		$("#description").bind('input propertychange', function() {
			updatePreview();

			$("#description_count").text(String($(this).val().length) + " / 500 文字");

			function updatePreview() {
				$.ajax({
					type: "GET",
					url: "/api/markdown/",
					dataType: "json",
					data: { text: $("#description").val() },
					success: function (json) {
						$("#preview").html(json["Markdown"]);
					}
				});
			}
		});

		$("#preview_dialog").focus(function () {
			$("#preview_frame").focus();
		});

		$("#preview_dialog input").focus(function () {
			$("#preview_frame").focus();
		});

		$("#preview_dialog").on("show.bs.modal", function() {
			$("#preview_frame").focus();
		});

		$("#preview_dialog").on("hidden.bs.modal", function() {
			var iframe = $("#preview_frame")[0];

			iframe.contentWindow["Module"].abort();
		});

		$("#create_source").on("submit", function (e) {
			e.preventDefault();

			if (!compile(true)) {
				return;
			}

			var startax = convertArrayBufferToBase64(FS.readFile("source.ax"));

			var form = $(this).serializeArray();
			form.push({
				"name": "sourcecode",
				"value": editor.getValue()
			});
			form.push({
				"name":  "thumbnail",
				"value": thumbnail
			});
			form.push({
				"name":  "startax",
				"value": startax
			});
			form.push({
				"name":  "attachments",
				"value": JSON.stringify(attachments)
			});
			form.push({
				"name":  "runtime",
				"value": detect_runtime()
			});

			$.ajax({
				type: "POST",
				url:  "/api/program/create/",
				dataType: "json",
				data: form
			}).success(function (json) {
				var response;
				if (!json.responseJSON) {
					response = json;
				} else {
					response = json.responseJSON;
				}

				assertBottom("success", response.Message);

				location.href = "/program/view/?p="+response.ID;
			}).error(function (json) {
				
				var modal = $("#modal");
				var modal_title = $("#modal_title");
				var modal_text = $("#modal_text");
	
				modal_title.text("エラー");
	
				var message = "";
				if (!json.responseJSON) {
					message = json.Message;
				} else {
					message = json.responseJSON.Message;
				}
	
				modal_text.text(message);
				modal.modal();
			});
		});

		$.each(templateList, function(key, name) {
			$("#template_list").append(
				$('<button class="btn btn-block pull-left template_' + key + '" />').on("click", function (event) {
					if (selectedTemplate != key) {
						$(this).animate({
							"background-color": "#59B75C",
							"color": "#ffffff"
						});
						$(this).find("i").animate({
							"color": "#ffffff"
						});

						if (selectedTemplate != "") {
							reset($("#template_list").find(".template_" + selectedTemplate));
						}

						selectedTemplate = key;

					} else {
						selectedTemplate = "";
						reset($(this));
					}

					function reset(elem) {
						elem.animate({
							"background-color": "#ffffff",
							"color": "#0000000"
						});
						elem.find("i").animate({
							"color": "#ababab"
						});
					}
				}).append(
					$('<i class="mdi-editor-insert-drive-file"></i>')
				).append(
					$("<br />")
				).append(
					$("<span>").text(name)
				)
			);
		});

		if ({{ .UserID }} == 0) {
			document.location.href = "/user/login/";
		}

		function convertArrayBufferToBase64(buffer) {
			var result = '';
			var bytes = new Uint8Array(buffer);
			var len = bytes.byteLength;
			for (var i = 0; i < len; i++) {
				result += String.fromCharCode(bytes[i]);
			}
			return window.btoa(result);
		}

		function updateAttachmentsProgress(limit) {
			var total = $("#attachments_box").data("totalSize");
	
			$("#attachments_capacity").css({
				"width": String((total / limit) * 100) + "%"
			});
		}

	});
</script>

{{ end }}
