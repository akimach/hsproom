{{ define "Header" }}

{{ linkJS "bootstrap-paginator.min.js" }}

{{ end }}

{{ define "Content" }}

<div class="row">
	<div class="col-md-8 col-md-offset-2">
		<h1><i class="glyphicon mdi-action-settings"></i> 管理画面</h1>
	</div>
</div>

<div class="row">
	<div class="col-md-2 col-md-offset-2 col-xs-12 col-sm-12">
		
		<div id="menu" class="btn-group-vertical">
			<a id="home_button" href="javascript:home();" class="btn btn-default">トップ <i class="mdi-image-navigate-next"></i></a>
			<a id="edit_button" href="javascript:edit();" class="btn btn-default">プログラムの編集 <i class="mdi-image-navigate-next"></i></a>
			<a id="good_button" href="javascript:good();" class="btn btn-default">いいね!一覧 <i class="mdi-image-navigate-next"></i></a>
			<a id="notification_button" href="javascript:notification();" class="btn btn-default">通知一覧 <i class="mdi-image-navigate-next"></i></a>
		</div>
	</div>
	
	<div class="col-md-6 col-xs-12 col-sm-12">
	
		<div id="home" class="panel panel-default">
			<div class="panel-heading">
				管理画面へようこそ！
			</div>
			<div class="panel-body">
				左のメニューから項目を選択してください。
			</div>
		</div>
	
		<div id="edit" class="panel panel-default">
			<div class="panel-heading">
				投稿したプログラム一覧
			</div>
			<div class="panel-body">
				<div class="list-group">

				</div>
				<ul id="edit_pagination" class="pagination pagination-sm">
				</ul>

			</div>
		</div>
	
		<div id="good" class="panel panel-default">
			<div class="panel-heading">
				いいね!したプログラム一覧
			</div>
			<div class="panel-body">
				<div class="list-group">

				</div>
				<ul id="good_pagination" class="pagination pagination-sm">
				</ul>

			</div>
		</div>

		<div id="notification" class="panel panel-default">
			<div class="panel-heading">
				通知一覧
			</div>
			<div class="panel-body">
				<div class="list-group">

				</div>
				<ul id="notification_pagination" class="pagination pagination-sm">
				</ul>

			</div>
		</div>
	
	</div>

</div>

<div class="modal" id="modal">
	<div class="modal-dialog">
		<div class="modal-content">
			<div class="modal-header">
				<button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>
				<h4 class="modal-title">Modal title</h4>
			</div>
			<div class="modal-body">
				<p>One fine body…</p>
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-default" data-dismiss="modal">キャンセル</button>
				<button id="delete_button" type="button" class="btn btn-warning" data-dismiss="modal">削除</button>
			</div>
		</div>
	</div>
</div>

<script type="text/javascript">

var currentProgramPage = 0;
var currentGoodPage = 0;

function userProgramListItem(programInfo) {
	return $('<div class="list-group-item" />').append(
		$('<div class="row-picture" />').append(
			$('<img src="/api/program/thumbnail/?p='+programInfo.ID+'" class="circle" />')
		)
	).append(
		$('<div class="row-content" />').append(
			$('<div class="least-content" />').append(
				$('<a href="/program/edit/?p='+programInfo.ID+'" class="text-primary"><i class="mdi-editor-mode-edit"></i>編集</a> ')
			).append(
				$('<a href="javascript:removeProgram('+programInfo.ID+');" class="text-warning"> <i class="mdi-navigation-close"></i>削除</a>')
			)
		).append(
			$('<h4 class="list-group-item-heading" />').append(
				$('<a href="/program/view/?p='+programInfo.ID+'" />').text(programInfo.Title)
			)
		).append(
			$('<p class="list-group-item-text" />').append(
				$('<div class="" />').text("最終更新:"+(programInfo.UpdatedAt.Valid ? programInfo.UpdatedAt.Time : "-"))
			).append(
				$('<div class="" />').text("作成日:  "+programInfo.CreatedAt)
			)
		)
	).append(
		$('<div class="list-group-separator"></div>')
	);
}

function userGoodListItem(programInfo) {
	return $('<div class="list-group-item" />').append(
		$('<div class="row-picture" />').append(
			$('<img src="/api/program/thumbnail/?p='+programInfo.ID+'" class="circle" />')
		)
	).append(
		$('<div class="row-content" />').append(
			$('<div class="least-content" />').append(
				$('<a href="javascript:removeGood('+programInfo.ID+');" class="text-warning"><i class="mdi-navigation-close"></i>取り消し</a>')
			)
		).append(
			$('<h4 class="list-group-item-heading" />').append(
				$('<a href="/program/view/?p='+programInfo.ID+'" />').text(programInfo.Title)
			).append('<span class="small"> by <a href="/user/view/?u='+programInfo.UserID+'">'+programInfo.UserName+"</a></span>")

		).append(
			$('<p class="list-group-item-text" />').append(
				$('<div class="" />').html(programInfo.Description) // TODO: markdownに対応。Ajax
			)
		)
	).append(
		$('<div class="list-group-separator"></div>')
	);

}

function userNotificationListItem(notificationInfo) {
	return $('<div class="list-group-item" />').append(
		$('<div class="row-content" />').append(
			$('<div class="least-content" />').append(
				$('<a href="javascript:removeNotification('+notificationInfo.ID+');" class="text-success"><i class="mdi-action-done"></i>既読にする</a>')
			)
		).append(
			$('<p class="list-group-item-heading text-small" />').append(
				$('<a href="' + notificationInfo.URL + '" />').text(notificationInfo.Message)
			)
		).append(
			$('<p class="list-group-item-text" />').append(
				$('<div class="text-muted" />').html(notificationInfo.CreatedAt)
			)
		)
	).append(
		$('<div class="list-group-separator"></div>')
	);

}


function home() {
	hideAll();

	$("#home_button").addClass("disabled");
	$("#home").show();
}

function edit() {
	hideAll();

	$("#edit_button").addClass("disabled");
	$("#edit").show();

	changeUserProgramsPage(0);
}

function good() {
	hideAll();

	$("#good_button").addClass("disabled");
	$("#good").show();

	changeGoodProgramsPage(0);
}

function notification() {
	hideAll();

	$("#notification_button").addClass("disabled");
	$("#notification").show();

	changeNotificationsPage(0);
}

function hideAll() {
	$(".panel").each(function () {
		$(this).hide();
	});
	$("#menu .disabled").removeClass("disabled");
}

function changeUserProgramsPage(page) {
	updateUserPrograms(page).then(function(rowCount) {
		var maxPage = Math.floor(rowCount / 5);
		if (rowCount % 5 == 0) {
			maxPage--;
		}
		updatePagination($("#edit_pagination"), changeUserProgramsPage, page, maxPage);

		currentProgramPage = page;
	});
}

function updatePagination(baseElem, changeFunc, curPage, maxPage) {

	baseElem.bootstrapPaginator({
		bootstrapMajorVersion: 3,
		currentPage: curPage + 1,
		totalPages:  maxPage + 1,
		onPageClicked: function (event, oe, type, page) {
			changeFunc(page - 1);
		}
	});

}

function updateUserPrograms(page) {
	var defer = $.Deferred();

	$.ajax({
		type: "GET",
		url: "/api/user/programs/",
		dataType: "json",
		data: {
			"u": {{ .UserInfo.ID }},
			"n": 5,
			"o": page*5
		}
	}).success(function (data) {
		$("#edit .list-group").html("");
		$.each(data.Programs, function () {
			if (this.Title != "") {
				var listItem = userProgramListItem(this);

				if (!this.Published) {
					listItem.find(".least-content").prepend('<span class="label label-info">下書き</span> ');
				}

				$("#edit .list-group").append(listItem);
			}
		});

		defer.resolve(data.ProgramCount);

	}).error(function (data) {
		assertBottom("error", "データの取得に失敗しました。");

		defer.reject();
	});

	return defer.promise();
}

function changeGoodProgramsPage(page) {
	updateGoodPrograms(page).then(function(rowCount) {
		var maxPage = Math.floor(rowCount / 5);
		if (rowCount % 5 == 0) {
			maxPage--;
		}
		updatePagination($("#good_pagination"), changeGoodProgramsPage, page, maxPage);

		currentGoodPage = page;
	});
}

function updateGoodPrograms(page) {
	var defer = $.Deferred();

	$.ajax({
		type: "GET",
		url: "/api/user/goods/",
		dataType: "json",
		data: {
			"u": {{ .UserInfo.ID }},
			"n": 5,
			"o": page*5
		}
	}).success(function (data) {
		$("#good .list-group").html("");
		$.each(data.Programs, function () {
			if (this.Title != "") {

				var $this = this;

				$.ajax({
					type: "GET",
					url : "/api/markdown/",
					dataType: "json",
					data: {
						"text": $this.Description.substr(0, 150)
					}
				}).success(function (data) {
					$this.Description = data.Markdown;
					$("#good .list-group").append(userGoodListItem($this));
				}).error(function (data) {
				});
			}
		});

		defer.resolve(data.ProgramCount);

	}).error(function (data) {
		assertBottom("error", "データの取得に失敗しました。");

		defer.reject();
	});

	return defer.promise();
}

function changeNotificationsPage(page) {
	updateNotifications(page).then(function(rowCount) {
		var maxPage = Math.floor(rowCount / 5);
		if (rowCount % 5 == 0) {
			maxPage--;
		}
		updatePagination($("#notification_pagination"), changeNotificationsPage, page, maxPage);

		currentNotificationPage = page;
	});
}

function updateNotifications(page) {
	var defer = $.Deferred();

	$.ajax({
		type: "GET",
		url: "/api/user/notifications/",
		dataType: "json",
		data: {
			"u": {{ .UserInfo.ID }},
			"n": 15,
			"o": page*15
		}
	}).success(function (data) {
		$("#notification .list-group").html("");
		$.each(data.Notifications, function () {

			$("#notification .list-group").append(userNotificationListItem(this));
		});

		defer.resolve(data.NotificationCount);

	}).error(function (data) {
		assertBottom("error", "データの取得に失敗しました。");

		defer.reject();
	});

	return defer.promise();
}

function removeProgram(programId) {
	$("#modal .modal-title").text("確認");
	$("#modal .modal-body p").text("本当にプログラムを削除しますか？");

	$("#modal").modal();

	$("#delete_button").bind("click", function() {
		$.ajax({
			type: "POST",
			dataType: "json",
			url: "/api/program/remove/",
			data: {
				"p": programId
			}
		}).success(function(data) {
			changeUserProgramsPage(currentProgramPage);

			assertBottom("success", "プログラムの削除に成功しました。");
		}).error(function(data) {
			assertBottom("error", "プログラムの削除に失敗しました。");
		});
	});
}

function removeGood(programId) {

	$.ajax({
		type: "POST",
		dataType: "json",
		url: "/api/good/remove/",
		data: {
			"p": programId
		}
	}).success(function(data) {
		changeGoodProgramsPage(currentGoodPage);

		assertBottom("success", "いいね!の取り消しに成功しました。");
	}).error(function(data) {
		assertBottom("error", "いいね!の取り消しに失敗しました。");
	});

}

function removeNotification(notificationId) {

	$.ajax({
		type: "POST",
		dataType: "json",
		url: "/api/notification/remove/",
		data: {
			"n": notificationId
		}
	}).success(function(data) {
		changeNotificationsPage(currentNotificationPage);

		assertBottom("success", "通知の既読に成功しました。");
	}).error(function(data) {
		assertBottom("error", "通知の既読に失敗しました。");
	});

}


$(document).ready(function() {
	home();

	if ({{ .UserID }} == 0) {
		document.location.href = "/user/login/";
	}

	switch("{{ .Section }}") {
	case "program":
		edit();
		break;
	case "good":
		good();
		break;
	case "notification":
		notification();
		break;
	}
});

</script>

{{ end }}
