{{ define "Header" }}

<meta name="twitter:card" content="summary_large_image">
<meta name="twitter:site" content="@hsproom">
<!--<meta name="twitter:creator" content="@ToDO">-->
<meta name="twitter:title" content="{{ .Program.Title }}">
<meta name="twitter:description" content="{{ plugin "shorten" (plugin "replaceSourceTag" (subString .Program.Description 0 150) "" | normalize) }}">
<meta name="twitter:image" content="http://hsproom.me/api/program/thumbnail/?p={{ .Program.ID }}">

{{ linkJS "twitter-entities.js" }}
{{ linkJS "flickity.pkgd.js" }}
{{ linkJS "shCore.js" }}
{{ linkJS "shBrushHSP.js" }}
{{ linkCSS "flickity.css" }}
{{ linkCSS "shCoreHSP.css" }}

<style type="text/css">

.title_heading {
	position: relative;
}

.share_buttons {
	position: absolute;

	top: auto;
	bottom: 0;
	right:  0;

	text-align: right;
}

.share_played_number, .share_good_number {
	font-size: 1.5em;
}

.share_played_number i, .share_good_number i {
	font-size: 1.6em;
}

.share_good_number a {
	display: inline-block;
	text-shadow: 0 0 5px #aaaaaa;
}
.share_good_number a:hover {
	text-decoration: none;
}

ul.share-buttons{
  list-style: none;
  padding: 0;
}

ul.share-buttons li{
  display: inline;
}

.good_button_animate {
	transition: all 1s ease;
	-webkit-transition: all 1s ease;

	transform: rotate(360deg);
	-webkit-transform: rotate(360deg);
}
.container_box {
	width: 1000px;
}
.screen_box {
	position: relative;

	width: 640px;
	height: 500px;
}

#comment {
    background: #ffffff;
}

.comments {
	position: relative;

	width: 340px;
	height: 480px;

	margin-left: 5px;
    padding: 5px;

    overflow: hidden;

	font-size: 1.2em;
}

#reply_target {
    background: #eeeeee;
}

.reply_list_item {
    margin-left: 10px;
}
.reply_list_item img {
    margin-right: 5px;
}
.reply_list_item .name {
    margin-right: 5px;
}
.reply_list_item .message {
    font-size: 65%;
    margin-right: 5px;
}

.circle {
    border-radius: 100%;
}

.comments .tool {
    margin-top: 1px;
    margin-bottom: 1px;
}

.comment_leftbox {
    height: 48px;

    line-height: 48px;
}

.comment_rightbox {
    height: 48px;

    line-height: 48px;
}

.description {
	width: 640px;

	font-size: 1.2em;
}
.user_box {
}
.user_title {
	font-size: 1.2em;

	color: #666666;
}
.user {
	width: 300px;
	/*height: 180px;*/

	padding: 10px;

	background: #efefef;
}

#tweets {
	height: 100%;

	overflow-x: hidden;
	overflow-y: scroll;

	background: #eeeeee;
}
#tweets .text {
	font-size: 0.8em;
}
#tweets .name {
	font-size: 0.7em;
}
.tweet.list-group-item {
    border-top: 1px solid #dddddd;
    padding-top: 3px;
    padding-bottom: 3px;
}
.tweet .reply_list_item {
    border-top: 1px dashed #dddddd;
}

.share_box {
	background: #eeeeee;
    
    padding-bottom: 10px;
}
.comment_box {
    height: 380px;

    overflow: hidden;
}
.gallery_box {
	width: 100%;
	padding-bottom: 35px;
}
.gallery {
	width: 100%;
}
.gallery-cell {
	width:  50%;
	height: 250px;

	margin-left: 10px;
}
.user_detail_link {
	position: absolute;

	bottom: 0;
	right: 10px;
}
.user .row-content {
	position: relative;
}

#screen {
	position: absolute;

	top:  0;
	left: 0;

	background: #000;
}

#screen_overlay {
	position: absolute;

	top:  0;
	left: 0;

	width:      640px;
	height:     480px;
	min-height: 480px;

	background: #000;

	filter: alpha(opacity=70);
	opacity: 0.7;
	-moz-opacity: 0.7;
}

.screen_overlay_log {
	position: absolute;

	top:  0;
	left: 0;

	width:  100%;
	height: 100%;

	padding: 5px;

	color: #fff;
}

.screen_overlay_playbtn {
	position: absolute;

	top:  50%;
	left: 50%;

	margin: -50px 0 0 -50px;
}

.screen_overlay_playbtn .btn-fab {
	width:  100px;
	height: 100px;

	font-size: 70px;
}

</style>
{{ end }}

{{ define "Content" }}

<div class="container_box center-block">

	{{ if not .Program.Published }}
	<div class="panel panel-default">
		<div class="panel-body">
			<div class="text-info">
				このプログラムは現在下書きとして保存されています。<br />
				投稿者以外はアクセスできません。
			</div>
		</div>
	</div>
	{{ end }}

	<div id="errors" class="alert alert-danger">
		エラーが発生しています。<br />
	</div>

	<div class="row">
		<div class="panel panel-default">
			<div class="panel-heading">
				<div class="title_heading row">
					<div class="title col-md-6">
						<h1>{{ .Program.Title }} {{ if eq .Program.UserID .UserID }}<a href="/program/edit/?p={{ .Program.ID }}"><i class="mdi-editor-mode-edit"></i></a>{{ end }}</h1>
						
						<span class="cap"> by <a href="/user/view/?u={{ .Program.UserID }}">{{ .Program.UserName }}</a>, at {{ .Program.CreatedAt.Format "2006年1月_2日 15:04:05" }}</span>
					</div>
					<div class="share_buttons col-md-6">
                        <span><ul class="share-buttons">
  <li><a href="javascript:void(0);" onclick="share('facebook');" title="Share on Facebook"><img src="/static/img/Facebook.png"></a></li>
  <li><a href="javascript:void(0);" onclick="share('twitter');" title="Tweet"><img src="/static/img/Twitter.png"></a></li>
  <li><a href="javascript:void(0);" onclick="share('google');" title="Share on Google+"><img src="/static/img/Google+.png"></a></li>
  <li><a href="javascript:void(0);" onclick="share('tumblr');" title="Post to Tumblr"><img src="/static/img/Tumblr.png"></a></li>
</ul></span>
						<span class="share_played_number"><i class="mdi-av-play-circle-outline"></i>{{ .Program.Play }}</span> 
						<span class="share_good_number">
							<a href="javascript:good();" class="good_button" ><i class="mdi-social-mood"></i></a>
							<span id="good"></span>
						</span>
					</div>
				</div>
			</div>
			<div class="panel-body">
				<div class="screen_box pull-left">
					<canvas id="screen" width=640 height=480 oncontextmenu="event.preventDefault()" tabindex="1"></canvas>
					<div id="screen_overlay" width=640 height=480>
						<div class="screen_overlay_log">
						</div>
						<div class="screen_overlay_playbtn">
							<a href="javascript:runProgram();" class="btn btn-primary btn-fab btn-raised mdi-av-play-circle-fill"></a>
						</div>
					</div>
					<p>powered by <a href="http://hsp.tv/make/hsp3dish.html" target="_blank">hsp3dish.js</a> / OpenHSP</p>
				</div>
				<div class="comments pull-right">
					<i class="mdi-communication-comment"></i>コメント<br />
					<div class="share_box">
						<form id="comment" class="form-inline shadow-z-1">
                            <div class="form-group" style="width:100%;">
                                <input type="hidden" name="p" value="{{ .Program.ID }}">
						        <textarea id="comment_input" type="text" class="form-control" name="m" rows="1" placeholder="このプログラムはどうでしたか？" style="width: 100%;"></textarea>
                                <div class="pull-left comment_leftbox">
                                    <img class="comment_user_icon circle" width="20px" />
                                    {{ if eq .UserID 0 }}
                                        <input type="text" class="form-control input-sm" name="n" value="" placeholder="名無し">
                                    {{ else }}
                                        <span class="comment_user_name small text-muted"></span>
                                    {{ end }}
                                </div>
                                <div class="pull-right comment_rightbox">
                                    <span class="text-muted"><small id="comment_count">200</small></span>
							        <button type="submit" class="btn btn-primary btn-sm">送信</button>
                                </div>
                                <br clear=both />
                            </div>
						</form>
					</div>
                    <div class="comment_box">
					    <div id="tweets" class="list-group">

					    </div>
                    </div>
				</div>
			</div>
		</div>
	</div>
	
	<div class="row">
		<div class="panel panel-default">
			<div class="panel-heading">
				<b>説明</b>
			</div>
			<div class="panel-body">
				<div class="description pull-left markdown">
					{{ plugin "replaceSourceTag" (markdown .Program.Description) .Program.Sourcecode | show}}
				</div>
				<div class="user_box pull-right">
					<span class="user_title"><i class="mdi-action-face-unlock"></i>作成者</span>
					<div class="user shadow-z-2">
						<div class="list-group">
							<div class="list-group-item">
								<div class="row-picture">
									<img id="profile_icon" class="circle" alt="icon">
								</div>
								<div class="row-content">
									<h4 class="list-group-item-heading"><a href="/user/view/?u={{ .Program.UserID }}">{{ .Program.UserName }}</a></h4>
									<p id="profile" class="list-group-item-text">ここはユーザの紹介文</p>
									<a class="user_detail_link" href="/user/view/?u={{ .Program.UserID }}">詳しく...</a>
								</div>
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>

	<br /><br />

	<div class="row">
		<div class="panel panel-default">
			<div class="panel-heading">
				<b>関連プログラム</b>
			</div>
			<div class="gallery_box panel-body">
				<div class="gallery" id="gallery">
					{{ range .RelatedPrograms }}
						{{ if eq .Title "" }}
						{{ else }}
						<div class="gallery-cell program_list_item">
							<div class="program_picture thumbnail">
								<img src="/api/program/thumbnail/?p={{ .ID }}" />
							</div>
							<div class="program_content">
								<div class="program_item_heading">
									<span class="h2"><a href="/program/view/?p={{ .ID }}">{{ .Title }}</a></span>
									<span class="small">by <a href="/user/view/?u={{ .UserID }}">{{ .UserName }}</a></span>
								</div>
								<div class="program_item_accessory">
									<span class="played_number"><i class="mdi-av-play-circle-outline"></i>{{ .Play }}</span>
									<span class="good_number"><i class="mdi-social-mood"></i>{{ .Good }}</span>
									<div class="date text-right">at {{ .CreatedAt.Format "Jan _2 3:04:05 PM (Mon)" }}</div>
								</div>
							</div>
						</div>
						{{ end }}
					{{ else }}
						<div class="gallery-cell">
							<span class="text-muted h2">プログラムが見つかりませんでした。</span>
						</div>
					{{ end }}
					<div class="gallery-cell">
					</div>
				</div>
			</div>
		</div>
	</div>

</div>

<div id="reply_dialog" class="modal fade">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>
                <h4 class="modal-title">返信</h4>
            </div>
            <div class="modal-body">
                <div class="list-group">
                    <div id="reply_target" class="list-group-item">
                    </div>
                </div>
                <form id="reply" class="form-inline">
                    <div class="form-group" style="width: 100%;">
                        <input type="hidden" name="p" value="{{ .Program.ID }}">
                        <input id="reply_to" type="hidden" name="r" value="-1">
                        <textarea id="reply_input" type="text" class="form-control" name="m" rows="3" placeholder="返信..." style="width: 100%;"></textarea>
                        <div>
                            <img class="comment_user_icon circle" width="20px" />
                            {{ if eq .UserID 0 }}
                                <input type="text" class="form-control input-sm" name="n" value="" placeholder="名無し">
                            {{ else }}
                                <span class="comment_user_name small text-muted"></span>
                            {{ end }}
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <span class="text-muted"><small id="reply_count">200</small></span>
                <button class="btn btn-default" data-dismiss="modal">キャンセル</button>
                <button class="btn btn-primary" onclick="submitReply();">返信</button>
            </div>
        </div>
    </div>
</div>

<script type="text/javascript">
	function good() {
		$(".good_button").addClass("good_button_animate");
		setTimeout(function() {
			$(".good_button").removeClass("good_button_animate");
		}, 1000);

		$.ajax({
			type: "POST",
			url:  "/api/program/good/",
			dataType: "json",
			data: {
				"p": "{{ .Program.ID }}"
			}
		}).success(function(data) {
			$(".good_button").attr("href", "#");
			updateGoodCount();
			assertBottom("success", "いいね!しました。");
		}).error(function(data) {
			assertBottom("error", data.responseJSON.Message);
		});
	}

	function parseTwitterDate(tdate) {
		var system_date = new Date(Date.parse(tdate));
		var user_date = new Date();
		if (K.ie) {
			system_date = Date.parse(tdate.replace(/( \+)/, ' UTC$1'))
		}
		var diff = Math.floor((user_date - system_date) / 1000);
		if (diff <= 1) {return "さっき";}
		if (diff < 20) {return diff + " 秒";}
		if (diff < 40) {return "30 秒";}
		if (diff < 60) {return "1 分ほど";}
		if (diff <= 90) {return "1 分";}
		if (diff <= 3540) {return Math.round(diff / 60) + " 分";}
		if (diff <= 5400) {return "1 時間";}
		if (diff <= 86400) {return Math.round(diff / 3600) + " 時間";}
		if (diff <= 129600) {return "1 日";}
		if (diff < 604800) {return Math.round(diff / 86400) + " 日";}
		if (diff <= 777600) {return "1 週間";}
		return "on " + system_date;
	}
	
	// from http://widgets.twimg.com/j/1/widget.js
	var K = function () {
		var a = navigator.userAgent;
		return {
			ie: a.match(/MSIE\s([^;]*)/)
		}
	}();	

	var count = 0;
    var maxId = 0;

    function makeComments(comments) {
        var result = $("<div />");

        $.each(comments, function (i, com) {
            if (com.ReplyTo != -1) {
                var target = $("#comment_"+com.ReplyTo);
                if (target[0]) {
                    // WORKAROUND
                    var c = {
                        Replies: [com]
                    };

                    appendReplies(target, c);
                }
                
                return;
            }

	    	// TODO: tweetクラスをcommentへ変更
	    	var comment = $("<div />").addClass("tweet").addClass("list-group-item").attr("id", "comment_"+com.ID);
	    	var iconbox = $("<div />").addClass("row-picture");
	    	var icon = $("<img />").attr("src", com.User.IconURL).attr("alt", com.User.Name).addClass("circle");
	    	var contents = $("<div />").addClass("row-content");
	    	var least = $("<div />").addClass("least-content").text(parseTwitterDate(com.CreatedAt));

            var userlink;
            if (com.UserID == 0) {
                userlink = $("<p />").text(com.UserName).addClass("name");
            } else {
                userlink = $("<a />").attr("href", "/user/view/?u="+com.UserID).text(com.UserName).addClass("name");
            }

	    	var name = $("<h4 />").addClass("list-group-item-heading").append(userlink);
	    	var text = $("<p />").addClass("text list-group-item-text").html(com.Message);
            var reply_btn = $("<a />").attr({"href": "javascript:replyTo("+com.ID+");", "title": "返信"}).append($("<i />").addClass("mdi-content-reply"));
            var tool = $("<p />").addClass("tool").append(reply_btn);

            if (com.UserID == {{ .UserID }} && 0 != {{ .UserID }}) {
                tool.append($("<a />").attr({ "href": "javascript:removeComment("+com.ID+");", "title": "削除"}).append($("<i />").addClass("mdi-content-clear")).addClass("text-danger"));
            }

	    	iconbox.append(icon);
	    	comment.append(iconbox);
	    	contents.append(name).append(text).append(least).append(tool);
	    	comment.append(contents);

            appendReplies(comment, com);

	    	result.append(comment);
	    });

        return result;

        function appendReplies(elem, com) {
            if (!com || !com.Replies) {
                return;
            }

            $.each(com.Replies, function () {
                var reply = $("<div />").addClass("reply_list_item").attr("id", "comment_"+this.ID);

                var icon = $("<img />").attr({
                    "src": this.User.IconURL,
                    "width": 20
                }).addClass("circle");

                var name;
                if (this.UserID != 0) {
                    name = $("<a />").attr("href", "/user/view/?u="+this.UserID).text(this.UserName).addClass("small name");
                } else {
                    name = $("<span />").text(this.UserName).addClass("small name");
                }

                var message = $("<span />").html(this.Message).addClass("reply_message").addClass("small message");

                if (this.UserID == {{ .UserID }} && 0 != {{ .UserID }}) {
                    message.append($("<a />").attr({ "href": "javascript:removeComment("+this.ID+");", "title": "削除"}).append($("<i />").addClass("mdi-content-clear text-small")).addClass("text-danger"));
                }

                reply.append(icon).append(name).append(message);
                appendReplies(reply, this.Replies);
                elem.append(reply);
            });
        }
    }

    function reloadComments() {
        $.ajax({
            url:  "/api/comment/list/",
            type: "GET",
            dataType: "json",
            cache:    false,
            data: {
                "p": {{ .Program.ID }},
                "n": 10,
                "o": 0,
                "s": maxId,
                "c": 1
            }
        }).success(function (data, status) {
            if (!data.Comments) {
                return;
            }

            $("#tweets").prepend(makeComments(data.Comments));

            count += data.Count;
            maxId  = data.MaxID;
        }).error(function (data) {
        });
    }

	function loadComments(callback) {
		$.ajax({
			url: "/api/comment/list/",
			type: "GET",
			dataType: "json",
			cache: false,
			data: {
				"p": {{ .Program.ID }},
				"n": 10,
				"o": count
			}
		}).success(function (data, status) {
            if (!data.Comments) {
                return;
            }

			$("#tweets").append(makeComments(data.Comments));

			count += data.Count;
            maxId  = data.MaxID;

            return callback();
		}).error( function (data, status, error) {

            return callback();
		});

	}

	function setProfile() {
		$.ajax({
			url: "/api/user/info/",
			type: "GET",
			dataType: "json",
			cache: false,
			data: {
				"u": "{{ .Program.UserID }}"
			},
		}).success(function (data, status) {
			$("#profile").text(data.Profile.substring(0, 50) + "...");
			$("#profile_icon").attr("src", data.IconURL);
		}).error(function (data, status, error) {
		});
	}

    function setUserProfile() {
        if ({{ .UserID }} == 0) {
            return;
        }
        $.ajax({
            url: "/api/user/info/",
            type: "GET",
            dataType: "json",
            cache: false,
            data: {
               "u": "{{ .UserID }}"
            }
        }).success(function (data, status) {
           $(".comment_user_icon").attr("src", data.IconURL);
           $(".comment_user_name").text(data.Name);
        });
    }

	function setThumbnail() {
		$("#screen").css({
			"background-image": "url(/api/program/thumbnail/?p={{ .Program.ID }})",
			"background-size" : "640px 480px"
			});
	}

    function share(sns) {
		var title = encodeURIComponent("{{ .Program.Title }}");
		var url   = encodeURIComponent(location.href);
        var user  = "";

		// ユーザ名の取得は後で統一も要検討
		$.ajax({
			url: '/api/user/info/',
			type: "GET",
			dataType: "json",
			data: {
				"u": "{{ .Program.UserID }}"
			}
		}).success(function (data, status) {

            if ((sns == "twitter" && data.Website.indexOf("https://twitter.com/") == 0) ||
                (sns == "facebook" && data.Website.indexOf("https://www.facebook.com/") == 0) ||
                (sns == "google" && data.Website.indexOf("https://plus.google.com/") == 0) ||
                (sns == "tumblr" && data.Website.indexOf("https://www.tumblr.com/") == 0)) {
                user = data.ScreenName;
            }

            openSNS();

        }).error(function (data) {

            openSNS();

        });

        function openSNS() {
            switch(sns) {
            case "facebook":
                openFacebook(title, url, user);
                break;
            case "twitter":
                openTwitter(title, url, user);
                break;
            case "google":
                openGoogle(title, url, user);
                break;
            case "tumblr":
                openTumblr(title, url, user);
                break;
            }
        }
    }

    function openFacebook(title, url, user) {
		open("https://www.facebook.com/sharer/sharer.php?t="+title+"&amp;amp;u="+url, "プログラムにコメントする", "width=600,height=331");
    }

	function openTwitter(title, url, user) {

		var hashtags = encodeURIComponent("hsproom #hsp3");

        if (user != "") {
			open("https://twitter.com/intent/tweet?text="+title+"&amp;amp;url="+url+"&amp;amp;hashtags="+hashtags+"&amp;amp;via="+user, "プログラムにコメントする", "width=600,height=331");
        } else {
			open("https://twitter.com/intent/tweet?text="+title+"&amp;amp;url="+url+"&amp;amp;hashtags="+hashtags, "プログラムにコメントする", "width=600,height=331");
		}
	}

    function openGoogle(title, url, user) {
        open("https://plus.google.com/share?url="+url, "プログラムにコメントする", "width=600,height=331");
    }

    function openTumblr(title, url, user) {
        open("https://www.tumblr.com/share?v=3&amp;&amp;u="+url+"&amp;&amp;t="+title+"&amp;&amp;s=", "プログラムにコメントする", "width=600,height=331");
    }

    function replyTo(id) {
        $("#reply_input").text("").val("");
        $("#reply_dialog").modal();
        $("#reply_target").html($("#comment_"+id).html());
        $("#reply_to").val(id);
    }

    function removeComment(id) {
        $.ajax({
            type: "POST",
            url:  "/api/comment/delete/",
            dataType: "json",
            data: {
                "c": id
            }
        }).success(function (data, status) {
            assertBottom("success", "削除に成功しました。");

            $("#comment_"+id).remove();
        }).error(function (data) {
            if (data.Message) {
                assertBottom("error", data.Message);
            } else {
                assertBottom("error", "削除に失敗しました。");
            }
        });
    }

    function submitReply() {
        $("#reply_dialog").modal("hide");

        var form = $("#reply").serializeArray();
        $.ajax({
            type: "POST",
            url: "/api/comment/post/",
            dataType: "json",
            data: form
        }).success(function (response) {
            assertBottom("success", response.Message);

            setTimeout(reloadComments, 1000);
        }).error(function (response) {
            if (response.Message) {
                assertBottom("error", response.Message);
            } else {
                assertBottom("error", "投稿に失敗しました。");
            }
        });
    }

	function updateGoodCount() {
	
		$.ajax({
			type: "GET",
			dataType: "json",
			url: "/api/program/good/count/",
			data: {
				"p": {{ .Program.ID }}
			}
		}).success(function (data) {
			$("#good").text(data.GoodCount);
		}).error(function (data) {
			assertBottom("いいね数の取得に失敗しました。");
		});
	}

	function runProgram() {
		runWithFS($("#screen_overlay .screen_overlay_log"));

		$("#screen_overlay .screen_overlay_playbtn").fadeOut("slow");
	}

	function postProgramRun() {
		$("#screen_overlay").hide();
	}

    function updateTextCount(input, count) {
       var len = 200 - $(input).val().length;
       count.text(len);
       count.attr("class", "");
       if (len <= 0) {
           count.addClass("text-danger");
       } else if (len <= 20) {
           count.addClass("text-warning");
       }
    }

	$(document).ready(function() {
		loadComments(function(){});
		setProfile();
		setThumbnail();
        setUserProfile();

		setInterval(reloadComments, 15000);

		$("#gallery").flickity({
			cellAlign: "center",
			wrapAround: true,
			setSize: false
		});

		updateGoodCount();

        $("#comment_input").focus(function () {
            $(this).animate({
                height: 80
            }, "normal");
        }).blur(function () {
            $(this).animate({
                height: 20
            }, "normal");
        });

        $("#comment_input").keydown(function () {
            updateTextCount(this, $("#comment_count"));
        });

        $("#reply_input").keydown(function () {
            updateTextCount(this, $("#reply_count"));
        });

        var is_loading = false;
        $("#tweets").on("scroll", function () {
            var top    = $(this).scrollTop();
            var height = $(this).height();
            var tweets_height = this.scrollHeight;

            if (top + height > tweets_height - 20) {
                if (is_loading) {
                    return;
                }
                // TODO: Something
                console.log("load more..");
                is_loading = true;

                loadComments(function() {
                    is_loading = false;
                });
            }
        });

        $("#comment").on("submit", function (e) {
            e.preventDefault();

            var form = $(this).serializeArray();
            $.ajax({
                type: "POST",
                url: "/api/comment/post/",
                dataType: "json",
                data: form
            }).success(function (response) {
                assertBottom("success", response.Message);

                $("#comment_input").text("").val("");

                setTimeout(reloadComments, 1000);
            }).error(function (response) {
                if (response.Message) {
                    assertBottom("error", response.Message);
                } else {
                    assertBottom("error", "投稿に失敗しました。");
                }
            });
        });

		$("#errors").hide();

        SyntaxHighlighter.defaults.wordlist1 = "meslog prompt";
        SyntaxHighlighter.defaults.wordlist2 = "dummy";
        SyntaxHighlighter.defaults.wordlist3 = "dummy";
        SyntaxHighlighter.defaults.title = "ソースコード";
        SyntaxHighlighter.all();
	});

	var pid   = {{ .Program.ID }};
	var steps = "{{ .Program.Steps }}";
	var resolution = {
		w: "{{ .Program.ResolutionW }}",
		h: "{{ .Program.ResolutionH }}"
	};

	{{ plugin "loadProgram" .Program.Runtime }}

</script>
{{ end }}
